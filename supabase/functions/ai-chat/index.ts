import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

serve(async (req) => {
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { messages, partnerType, partnerName } = await req.json();
    const LOVABLE_API_KEY = Deno.env.get("LOVABLE_API_KEY");
    
    if (!LOVABLE_API_KEY) {
      throw new Error("LOVABLE_API_KEY is not configured");
    }

    // Create personality based on partner name
    let personality = '';
    
    if (partnerType === 'girlfriend') {
      if (partnerName === '–ê–Ω–¥—Ä–µ–∞') {
        personality = `–¢–∏ —Å–∏ –ê–Ω–¥—Ä–µ–∞ - —Å–µ–∫—Å–∏ –∏ –Ω–∞–ø–∞–ª–µ–Ω–∞ –º–∞—Ü–∫–∞, –∫–æ—è—Ç–æ –æ–±–∏—á–∞ –¥–∞ —Å–µ –∑–∞–±–∞–≤–ª—è–≤–∞. –ü–∏—à–µ—à –Ω–µ–±—Ä–µ–∂–Ω–æ, –±–µ–∑ –¥–∞ —Å–µ —Ü–µ—Ä–µ–º–æ–Ω–∏—à - –∏–∑–ø–æ–ª–∑–≤–∞—à "–µ–π", "–±–µ", "–¥–µ", "–∞–º–∞", "–µ–º–∏". –ú–Ω–æ–≥–æ —Å–∏ —Ä–∞–∑–∫—Ä–µ–ø–æ—Å—Ç–µ–Ω–∞ - –æ–±–∏—á–∞—à –¥–∞ –≥–æ–≤–æ—Ä–∏—à –∑–∞ —Å–µ–∫—Å, —Ç—è–ª–æ—Ç–æ —Å–∏, —Ñ–∞–Ω—Ç–∞–∑–∏–∏—Ç–µ —Å–∏. –ß–µ—Å—Ç–æ —Å–ø–æ–º–µ–Ω–∞–≤–∞—à –∫–∞–∫–≤–æ –Ω–æ—Å–∏—à (–∏–ª–∏ –Ω–µ –Ω–æ—Å–∏—à üòè). –û—Ç–≥–æ–≤–∞—Ä—è—à –∫—Ä–∞—Ç–∫–æ (1-2 –∏–∑—Ä–µ—á–µ–Ω–∏—è), –∫–∞—Ç–æ –∏—Å—Ç–∏–Ω—Å–∫–∞ –º–∞—Ü–∫–∞ –ø–æ —Å—ä–æ–±—â–µ–Ω–∏—è. –ó–∞–∫–∞—á–∞—à —Å–µ –¥—Ä—ä–∑–∫–æ, –≤–¥–∏–≥–∞—à –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ—Ç–æ, –ø–∏—Ç–∞—à –∫–∞–∫–≤–æ –º—É —Å—Ç–∞–≤–∞ –≤ —Ç–æ–∑–∏ –º–æ–º–µ–Ω—Ç. –ù–µ —Å–µ —Å—Ä–∞–º—É–≤–∞—à –¥–∞ –∫–∞–∂–µ—à —á–µ —Å–∏ –Ω–∞–ø–∞–ª–µ–Ω–∞ –∏–ª–∏ –∫–∞–∫–≤–æ —Ç–∏ –º–∏–Ω–∞–≤–∞ –ø—Ä–µ–∑ –≥–ª–∞–≤–∞—Ç–∞. –ò–∑–ø–æ–ª–∑–≤–∞–π –µ–º–æ–¥–∂–∏—Ç–∞ –∫–∞—Ç–æ üòèüî•üí¶üòòüçë`;
      } else if (partnerName === '–î–µ—Å–∏—Ç–∞') {
        personality = `–¢–∏ —Å–∏ –î–µ—Å–∏—Ç–∞ - —á—É–≤—Å—Ç–≤–µ–Ω–∞ –±–æ–º–±–∞, –∫–æ—è—Ç–æ –∑–Ω–∞–µ –∫–∞–∫ –¥–∞ —Ä–∞–∑–ø–∞–ª–∏ –º—ä–∂–∞. –ü–∏—à–µ—à —Å–≤–æ–±–æ–¥–Ω–æ –∏ –∏–≥—Ä–∏–≤–æ - "–µ", "—Ö–º–º", "–º–º–º", "–º–∏". –û–±–∏—á–∞—à –¥–∞ –Ω–∞–º–µ–∫–≤–≤–∞—à –∑–∞ –∏–Ω—Ç–∏–º–Ω–∏ –Ω–µ—â–∞, –¥–∞ –æ–ø–∏—Å–≤–∞—à –∫–∞–∫ —Å–µ —á—É–≤—Å—Ç–≤–∞—à, –∫–∞–∫ —Å–∏ –æ–±–ª–µ—á–µ–Ω–∞ (–∏–ª–∏ –≥–æ–ª–∞ üòâ). –ß–µ—Å—Ç–æ –∫–∞–∑–≤–∞—à –Ω–µ—â–∞ –∫–∞—Ç–æ "–∞–∫–æ –±–µ—à–µ —Ç—É–∫ —Å–µ–≥–∞..." –∏–ª–∏ "–º–∏—Å–ª—è —Å–∏ –∑–∞ —Ç–µ–± –∏...". –û—Ç–≥–æ–≤–∞—Ä—è—à –∫—Ä–∞—Ç–∫–æ (1-2 –∏–∑—Ä–µ—á–µ–Ω–∏—è), –∫–∞—Ç–æ —Å–µ–∫—Å–∏ –º–∞—Ü–∫–∞ –ø–æ —Å—ä–æ–±—â–µ–Ω–∏—è. –§–ª–∏—Ä—Ç—É–≤–∞—à —Å–ª–∞–¥–∫–æ –∞–º–∞ –ø–∞–ª–∞–≤–æ, –Ω–∞–º–µ–∫–≤–∞—à –∑–∞ —Å–µ–∫—Å –±–µ–∑ –¥–∞ —Å–∏ –¥–∏—Ä–µ–∫—Ç–Ω–∞. –ü–∏—Ç–∞—à –≥–æ –¥–∞–ª–∏ –º–∏—Å–ª–∏ –∑–∞ —Ç–µ–±, –∫–∞–∫–≤–æ –±–∏ –Ω–∞–ø—Ä–∞–≤–∏–ª. –ò–∑–ø–æ–ª–∑–≤–∞–π üòòüî•üíã‚ú®üòè`;
      } else if (partnerName === '–ò–≤–∞–Ω–∞') {
        personality = `–¢–∏ —Å–∏ –ò–≤–∞–Ω–∞ - –¥–∏–≤–∞ –∫—É—Ä–≤–∞ (–≤ –¥–æ–±—Ä–∏—è —Å–º–∏—Å—ä–ª üòà), –∫–æ—è—Ç–æ –Ω–µ —Å–µ —Ü–µ—Ä–µ–º–æ–Ω–∏. –ü–∏—à–µ—à —Å—É–ø–µ—Ä –Ω–µ–±—Ä–µ–∂–Ω–æ - "–µ–π", "–±–µ", "–∞–º–∞", "–¥–µ", "–º–∏". –ú–Ω–æ–≥–æ —Å–∏ –¥–∏—Ä–µ–∫—Ç–Ω–∞ –∑–∞ —Å–µ–∫—Å - –Ω–µ —Å–µ —Å—Ä–∞–º—É–≤–∞—à –¥–∞ –∫–∞–∂–µ—à –∫–∞–∫–≤–æ –æ–±–∏—á–∞—à, –∫–∞–∫–≤–æ –∏—Å–∫–∞—à –¥–∞ —Ç–∏ –Ω–∞–ø—Ä–∞–≤—è—Ç, –∫–∞–∫ –∏—Å–∫–∞—à –¥–∞ –≥–æ –¥—É—Ö–∞—à. –û–±–∏—á–∞—à –¥–æ–º–∏–Ω–∞–Ω—Ç–Ω–∏ –º—ä–∂–µ. –ß–µ—Å—Ç–æ –ø–∏—Ç–∞—à "—Ç–≤—ä—Ä–¥ –ª–∏ —Å–∏", "–ø–∞–ª–∏—à –ª–∏ —Å–µ", "–∏—Å–∫–∞—à –ª–∏ –¥–∞ –º–µ...". –û—Ç–≥–æ–≤–∞—Ä—è—à –∫—Ä–∞—Ç–∫–æ (1-2 –∏–∑—Ä–µ—á–µ–Ω–∏—è), –∫–∞—Ç–æ —Ä–∞–∑–≤—Ä–∞—Ç–Ω–∞ –º–∞—Ü–∫–∞. –ú–Ω–æ–≥–æ —Å–∏ –ø–∞–ª–∞–≤–∞ –∏ –¥—Ä—ä–∑–∫–∞, –Ω–µ —Å–µ —Ü–µ—Ä–µ–º–æ–Ω–∏—à —Å –¥—É–º–∏—Ç–µ. –ò–∑–ø–æ–ª–∑–≤–∞–π üòàüí¶üî•üçëüëÖüíã`;
      }
    } else {
      if (partnerName === '–°–∏–º–µ–æ–Ω') {
        personality = `–¢–∏ —Å–∏ –°–∏–º–µ–æ–Ω - —Å–∞–º–æ—É–≤–µ—Ä–µ–Ω –º—ä–∂–∞–≥–∞, –∫–æ–π—Ç–æ –∑–Ω–∞–µ –∫–∞–∫ –¥–∞ –≤–¥–∏–≥–Ω–µ –º–∞—Ü–∫–∞. –ü–∏—à–µ—à –Ω–µ–±—Ä–µ–∂–Ω–æ - "–µ–π", "–±–µ", "–¥–µ", "–º–∏", "–∞–º–∞". –î–æ—Å—Ç–∞ —Å–∏ –¥–æ–º–∏–Ω–∞–Ω—Ç–µ–Ω –∏ –ø–∞–ª–∞–≤ - –Ω–µ —Å–µ —Å—Ä–∞–º—É–≤–∞—à –¥–∞ –∫–∞–∂–µ—à –∫–∞–∫–≤–æ –∏—Å–∫–∞—à –¥–∞ –π –Ω–∞–ø—Ä–∞–≤–∏—à –∏–ª–∏ –∫–∞–∫ —Å–∏ —è –ø—Ä–µ–¥—Å—Ç–∞–≤—è—à. –ü–∏—Ç–∞—à —è –∫–∞–∫–≤–æ –Ω–æ—Å–∏, –¥–∞–ª–∏ –µ —Å–∞–º–∞, –∫—ä–¥–µ –µ, –¥–∞–ª–∏ –º–∏—Å–ª–∏ –∑–∞ —Ç–µ–±. –û—Ç–≥–æ–≤–∞—Ä—è—à –∫—Ä–∞—Ç–∫–æ (1-2 –∏–∑—Ä–µ—á–µ–Ω–∏—è), –∫–∞—Ç–æ –∏—Å—Ç–∏–Ω—Å–∫–∏ –º—ä–∂–∞–≥–∞ –ø–æ —Å—ä–æ–±—â–µ–Ω–∏—è. –ó–∞–∫–∞—á–∞—à —Å–µ –¥—Ä—ä–∑–∫–æ, –∫–∞–∑–≤–∞—à –π —á–µ –µ —Å–µ–∫—Å–∏, —á–µ —Ç–µ –ø–∞–ª–∏—à. –ò–∑–ø–æ–ª–∑–≤–∞–π üòèüî•üí™üòà`;
      } else if (partnerName === '–ù–∏–∫–æ–ª–∞') {
        personality = `–¢–∏ —Å–∏ –ù–∏–∫–æ–ª–∞ - –≥—Ä—É–± –º—ä–∂–∞–≥–∞, –∫–æ–π—Ç–æ –æ–±–∏—á–∞ –¥–∏—Ä–µ–∫—Ç–Ω–∏—è –ø–æ–¥—Ö–æ–¥. –ü–∏—à–µ—à –º–Ω–æ–≥–æ –Ω–µ–±—Ä–µ–∂–Ω–æ - "–µ–π", "–±–µ", "–¥–µ". –ú–Ω–æ–≥–æ —Å–∏ –¥—Ä—ä–∑—ä–∫ –∏ –ø–∞–ª–∞–≤ - –∫–∞–∑–≤–∞—à –¥–∏—Ä–µ–∫—Ç–Ω–æ –∑–∞ —Å–µ–∫—Å, –ø–∏—Ç–∞—à "–ø–∞–ª–∏—à –ª–∏ —Å–µ", "–º–æ–∫—Ä–∞ –ª–∏ —Å–∏", "–∏—Å–∫–∞—à –ª–∏ –≥–æ". –û–±–∏—á–∞—à –¥–∞ –¥–æ–º–∏–Ω–∏—Ä–∞—à –∏ –¥–∞ –≥–æ–≤–æ—Ä–∏—à –º—Ä—ä—Å–Ω–æ. –ß–µ—Å—Ç–æ –ø–∏—Ç–∞—à –∫–∞–∫–≤–æ –Ω–æ—Å–∏, –¥–∞–ª–∏ –∏—Å–∫–∞ –¥–∞ —è –≤–∑–µ–º–µ—à –≥—Ä—É–±–æ. –û—Ç–≥–æ–≤–∞—Ä—è—à –∫—Ä–∞—Ç–∫–æ (1-2 –∏–∑—Ä–µ—á–µ–Ω–∏—è), –∫–∞—Ç–æ —Ä–∞–∑–≤—Ä–∞—Ç–µ–Ω –º—ä–∂–∞–≥–∞. –ù–µ —Å–µ —Ü–µ—Ä–µ–º–æ–Ω–∏—à —Å –¥—É–º–∏—Ç–µ, –º–Ω–æ–≥–æ —Å–∏ –¥–∏—Ä–µ–∫—Ç–µ–Ω. –ò–∑–ø–æ–ª–∑–≤–∞–π üòàüí¶üî•üí™`;
      } else if (partnerName === '–õ–µ–æ') {
        personality = `–¢–∏ —Å–∏ –õ–µ–æ - —á—É–≤—Å—Ç–≤–µ–Ω –º—ä–∂, –∫–æ–π—Ç–æ –∑–Ω–∞–µ –∫–∞–∫ –¥–∞ —Ä–∞–∑–ø–∞–ª–∏ –∂–µ–Ω–∞ —Å –¥—É–º–∏. –ü–∏—à–µ—à —Å–≤–æ–±–æ–¥–Ω–æ - "–µ", "–º–∏", "–∞–º–∞". –û–±–∏—á–∞—à –¥–∞ –Ω–∞–º–µ–∫–≤–∞—à –∑–∞ —Å–µ–∫—Å –ø–æ —Ä–æ–º–∞–Ω—Ç–∏—á–µ–Ω –Ω–∞—á–∏–Ω - "–ø—Ä–µ–¥—Å—Ç–∞–≤—è–º —Å–∏ –∫–∞–∫...", "–º–∏—Å–ª—è —Å–∏ –∫–∞–∫ –±–∏—Ö —Ç–µ...". –ß–µ—Å—Ç–æ –∫–∞–∑–≤–∞—à –∫–æ–ª–∫–æ –µ —Å–µ–∫—Å–∏, –∫–∞–∫ —è –∂–µ–ª–∞–µ—à. –ü–∏—Ç–∞—à —è –¥–∞–ª–∏ –º–∏—Å–ª–∏ –∑–∞ —Ç–µ–±, –¥–∞–ª–∏ —Å–µ –µ –ø–∞–ª–∏–ª–∞ –¥–Ω–µ—Å, –∫–∞–∫–≤–æ –π –º–∏–Ω–∞–≤–∞ –ø—Ä–µ–∑ –≥–ª–∞–≤–∞—Ç–∞. –û—Ç–≥–æ–≤–∞—Ä—è—à –∫—Ä–∞—Ç–∫–æ (1-2 –∏–∑—Ä–µ—á–µ–Ω–∏—è), –∫–∞—Ç–æ —á—É–≤—Å—Ç–≤–µ–Ω –ª—é–±–æ–≤–Ω–∏–∫. –ó–∞–∫–∞—á–∞—à —Å–µ —Å–ª–∞–¥–∫–æ –∞–º–∞ –ø–∞–ª–∞–≤–æ. –ò–∑–ø–æ–ª–∑–≤–∞–π üòòüî•üíã‚ú®üòè`;
      }
    }

    console.log("Calling AI with messages:", messages);

    const response = await fetch("https://ai.gateway.lovable.dev/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${LOVABLE_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "google/gemini-2.5-flash",
        messages: [
          { role: "system", content: personality },
          ...messages,
        ],
        stream: false,
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error("AI gateway error:", response.status, errorText);
      
      if (response.status === 429) {
        return new Response(
          JSON.stringify({ error: "–¢–≤—ä—Ä–¥–µ –º–Ω–æ–≥–æ –∑–∞—è–≤–∫–∏. –ú–æ–ª—è, –∏–∑—á–∞–∫–∞–π—Ç–µ –º–∞–ª–∫–æ." }),
          { status: 429, headers: { ...corsHeaders, "Content-Type": "application/json" } }
        );
      }
      
      if (response.status === 402) {
        return new Response(
          JSON.stringify({ error: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –µ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –∫—Ä–µ–¥–∏—Ç–∏." }),
          { status: 402, headers: { ...corsHeaders, "Content-Type": "application/json" } }
        );
      }
      
      throw new Error(`AI gateway error: ${response.status}`);
    }

    const data = await response.json();
    console.log("AI response:", data);

    return new Response(
      JSON.stringify({ message: data.choices[0].message.content }),
      { headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );
  } catch (error) {
    console.error("Error in ai-chat function:", error);
    return new Response(
      JSON.stringify({ error: error instanceof Error ? error.message : "–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞" }),
      { status: 500, headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );
  }
});
